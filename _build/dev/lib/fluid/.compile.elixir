v1.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Contexts.beam">>,
 'Elixir.Fluid.Contexts',<<"lib/fluid/contexts.ex">>,
 ['Elixir.Kernel','Elixir.Protocol','Elixir.Module','Elixir.Kernel.Def'],
 ['Elixir.Dict'],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.BlankFileSystem.beam">>,
 'Elixir.Fluid.BlankFileSystem',<<"lib/fluid/file_system.ex">>,
 ['Elixir.Kernel','Elixir.Fluid.FileSystem','Elixir.Fluid.LocalFileSystem'],
 [],[],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Blocks.beam">>,
 'Elixir.Fluid.Blocks',<<"lib/fluid/blocks.ex">>,
 ['Elixir.Kernel','Elixir.Protocol','Elixir.Module','Elixir.Kernel.Def'],
 ['Elixir.Enum','Elixir.Fluid.Tags','Elixir.String',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Filters.Functions.beam">>,
 'Elixir.Fluid.Filters.Functions',<<"lib/fluid/filters.ex">>,
 ['Elixir.Kernel','Elixir.Fluid.Filters','Elixir.Functions'],
 ['Elixir.String'],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Filters.beam">>,
 'Elixir.Fluid.Filters',<<"lib/fluid/filters.ex">>,
 ['Elixir.Kernel','Elixir.Functions'],
 ['Elixir.Enum','Elixir.Fluid.Filters.Functions','Elixir.String',
  'Elixir.Fluid','Elixir.Regex','Elixir.Fluid.List','Elixir.List',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.LocalFileSystem.beam">>,
 'Elixir.Fluid.LocalFileSystem',<<"lib/fluid/file_system.ex">>,
 ['Elixir.Kernel','Elixir.Fluid.FileSystem','Elixir.Fluid.BlankFileSystem'],
 ['Elixir.String.Chars','Elixir.Regex','Elixir.Path',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.ForElse.Iterator.beam">>,
 'Elixir.Fluid.ForElse.Iterator',<<"lib/fluid/for_else.ex">>,
 ['Elixir.Fluid.Break','Elixir.Kernel','Elixir.Protocol',
  'Elixir.Fluid.Continue','Elixir.Module','Elixir.Kernel.Def',
  'Elixir.Iterator','Elixir.Fluid.ForElse'],
 [],[],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.List.beam">>,'Elixir.Fluid.List',
 <<"lib/fluid.ex">>,
 ['Elixir.Kernel','Elixir.Fluid','Elixir.List'],
 ['Elixir.String.Chars','Elixir.Fluid.FileSystem','Elixir.Fluid.Registers',
  'Elixir.Regex',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.beam">>,'Elixir.Fluid',
 <<"lib/fluid.ex">>,
 ['Elixir.Kernel','Elixir.List'],
 ['Elixir.String.Chars','Elixir.Fluid.FileSystem','Elixir.Fluid.Registers',
  'Elixir.Regex',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Tags.beam">>,'Elixir.Fluid.Tags',
 <<"lib/fluid/tags.ex">>,
 ['Elixir.Kernel','Elixir.Protocol','Elixir.Module','Elixir.Kernel.Def'],
 ['Elixir.Enum','Elixir.String','Elixir.Access'],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.ElseIf.beam">>,
 'Elixir.Fluid.ElseIf',<<"lib/fluid/if_else.ex">>,
 ['Elixir.Kernel','Elixir.Fluid.Else','Elixir.Fluid.Tags',
  'Elixir.Fluid.Templates','Elixir.Fluid.IfElse'],
 ['Elixir.RuntimeError',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Extends.beam">>,
 'Elixir.Fluid.Extends',<<"lib/fluid/extends.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Kernel','Elixir.Fluid.Tags',
  'Elixir.Fluid.Templates','Elixir.Fluid.Contexts','Elixir.Fluid.Inherit'],
 ['Elixir.String.Chars','Elixir.Fluid.FileSystem','Elixir.Dict',
  'Elixir.Fluid','Elixir.Regex','Elixir.Fluid.Render'],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Assign.beam">>,
 'Elixir.Fluid.Assign',<<"lib/fluid/assign.ex">>,
 ['Elixir.Kernel','Elixir.Fluid.Tags','Elixir.Fluid.Templates',
  'Elixir.Fluid.Contexts'],
 ['Elixir.Fluid.Variables','Elixir.String','Elixir.Dict','Elixir.Regex'],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Templates.beam">>,
 'Elixir.Fluid.Templates',<<"lib/fluid/templates.ex">>,
 ['Elixir.Kernel','Elixir.Protocol','Elixir.Module','Elixir.Kernel.Def',
  'Elixir.Fluid.Contexts'],
 ['Elixir.Fluid.Parse','Elixir.Fluid.Render',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.FileSystem.beam">>,
 'Elixir.Fluid.FileSystem',<<"lib/fluid/file_system.ex">>,
 ['Elixir.Kernel','Elixir.GenServer','Elixir.Module',
  'Elixir.Fluid.BlankFileSystem','Elixir.Fluid.LocalFileSystem'],
 ['Elixir.String.Chars','Elixir.Regex','Elixir.Path',gen_server,erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Else.beam">>,'Elixir.Fluid.Else',
 <<"lib/fluid/if_else.ex">>,
 ['Elixir.Fluid.ElseIf','Elixir.Kernel','Elixir.Fluid.Tags',
  'Elixir.Fluid.Templates','Elixir.Fluid.IfElse'],
 ['Elixir.RuntimeError',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Registers.beam">>,
 'Elixir.Fluid.Registers',<<"lib/fluid/registers.ex">>,
 ['Elixir.Kernel','Elixir.GenServer','Elixir.Module'],
 ['Elixir.Fluid.Extends','Elixir.Fluid.Blocks','Elixir.Fluid.Comment',
  'Elixir.Fluid.Include','Elixir.Fluid.ElseIf','Elixir.Fluid.Break',
  'Elixir.Fluid.Else','Elixir.Fluid.Default','Elixir.Fluid.Tags',
  'Elixir.String','Elixir.Fluid.Continue','Elixir.Dict','Elixir.Fluid.IfElse',
  'Elixir.Fluid.Inherit','Elixir.Fluid.Case',gen_server,
  'Elixir.Fluid.ForElse','Elixir.Fluid.When','Elixir.Fluid.Assign',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Inherit.beam">>,
 'Elixir.Fluid.Inherit',<<"lib/fluid/extends.ex">>,
 ['Elixir.Fluid.Extends','Elixir.Fluid.Blocks','Elixir.Kernel',
  'Elixir.Fluid.Tags','Elixir.Fluid.Templates','Elixir.Fluid.Contexts'],
 ['Elixir.String.Chars','Elixir.Fluid.FileSystem','Elixir.String',
  'Elixir.Dict','Elixir.Fluid','Elixir.Regex','Elixir.Fluid.Render',
  'Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Render.beam">>,
 'Elixir.Fluid.Render',<<"lib/fluid/render.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Fluid.Variables','Elixir.Kernel',
  'Elixir.Fluid.Tags','Elixir.Fluid.Templates','Elixir.Fluid.Contexts'],
 ['Elixir.Enum','Elixir.Fluid.Registers',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Variables.beam">>,
 'Elixir.Fluid.Variables',<<"lib/fluid/variables.ex">>,
 ['Elixir.Kernel','Elixir.Protocol','Elixir.Module','Elixir.Kernel.Def',
  'Elixir.Fluid.Contexts'],
 ['Elixir.Enum','Elixir.String.Chars','Elixir.String','Elixir.Fluid.Filters',
  'Elixir.Dict','Elixir.Fluid','Elixir.Regex','Elixir.List','Elixir.Access',
  erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Comment.beam">>,
 'Elixir.Fluid.Comment',<<"lib/fluid/comment.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Kernel','Elixir.Fluid.Templates'],
 [],[],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Parse.beam">>,'Elixir.Fluid.Parse',
 <<"lib/fluid/parse.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Kernel','Elixir.Fluid.Templates'],
 ['Elixir.Enum','Elixir.Fluid.Variables','Elixir.String.Chars','Elixir.Atom',
  'Elixir.Fluid.Tags','Elixir.String','Elixir.Fluid','Elixir.Fluid.Registers',
  'Elixir.Regex','Elixir.List','Elixir.Access','Elixir.RuntimeError',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Include.beam">>,
 'Elixir.Fluid.Include',<<"lib/fluid/include.ex">>,
 ['Elixir.Kernel','Elixir.Fluid.Tags','Elixir.Fluid.Templates',
  'Elixir.Fluid.Contexts'],
 ['Elixir.Enum','Elixir.Fluid.Variables','Elixir.String.Chars',
  'Elixir.Fluid.FileSystem','Elixir.String','Elixir.Dict','Elixir.Fluid',
  'Elixir.Regex','Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Conditions.beam">>,
 'Elixir.Fluid.Conditions',<<"lib/fluid/conditions.ex">>,
 ['Elixir.Fluid.Variables','Elixir.Kernel','Elixir.Protocol','Elixir.Module',
  'Elixir.Kernel.Def','Elixir.Fluid.Contexts'],
 ['Elixir.List.Chars',string,'Elixir.String','Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Case.beam">>,'Elixir.Fluid.Case',
 <<"lib/fluid/case.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Fluid.Variables','Elixir.Kernel',
  'Elixir.Fluid.Conditions','Elixir.Fluid.Tags','Elixir.Fluid.Templates',
  'Elixir.Fluid.When'],
 ['Elixir.Enum','Elixir.String.Chars','Elixir.Fluid','Elixir.Regex',
  'Elixir.Fluid.List','Elixir.List','Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.ForElse.beam">>,
 'Elixir.Fluid.ForElse',<<"lib/fluid/for_else.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Fluid.Break','Elixir.Kernel',
  'Elixir.Protocol','Elixir.Fluid.ForElse.Iterator','Elixir.Fluid.Continue',
  'Elixir.Fluid.Templates','Elixir.Module','Elixir.Kernel.Def',
  'Elixir.Fluid.Contexts','Elixir.Iterator'],
 ['Elixir.Enum','Elixir.Fluid.Variables','Elixir.String.Chars',
  'Elixir.String','Elixir.Dict','Elixir.Fluid','Elixir.Regex',
  'Elixir.Fluid.Render','Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.IfElse.beam">>,
 'Elixir.Fluid.IfElse',<<"lib/fluid/if_else.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Fluid.ElseIf','Elixir.Kernel',
  'Elixir.Fluid.Else','Elixir.Fluid.Tags','Elixir.Fluid.Templates'],
 ['Elixir.Enum','Elixir.String.Chars','Elixir.Fluid.Conditions',
  'Elixir.String','Elixir.Fluid','Elixir.Regex','Elixir.Fluid.Render',
  'Elixir.List','Elixir.RuntimeError',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.When.beam">>,'Elixir.Fluid.When',
 <<"lib/fluid/case.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Fluid.Variables','Elixir.Kernel',
  'Elixir.Fluid.Conditions','Elixir.Fluid.Tags','Elixir.Fluid.Templates',
  'Elixir.Fluid.Case'],
 ['Elixir.Enum','Elixir.String.Chars','Elixir.Fluid','Elixir.Regex',
  'Elixir.Fluid.List','Elixir.List','Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Break.beam">>,'Elixir.Fluid.Break',
 <<"lib/fluid/for_else.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Kernel','Elixir.Protocol',
  'Elixir.Fluid.ForElse.Iterator','Elixir.Fluid.Tags','Elixir.Fluid.Continue',
  'Elixir.Fluid.Templates','Elixir.Module','Elixir.Kernel.Def',
  'Elixir.Fluid.Contexts','Elixir.Iterator','Elixir.Fluid.ForElse'],
 ['Elixir.Enum','Elixir.Fluid.Variables','Elixir.String.Chars',
  'Elixir.String','Elixir.Dict','Elixir.Fluid','Elixir.Regex',
  'Elixir.Fluid.Render','Elixir.Access',erlang],
 [],nil}.
{<<"_build/dev/lib/fluid/ebin/Elixir.Fluid.Continue.beam">>,
 'Elixir.Fluid.Continue',<<"lib/fluid/for_else.ex">>,
 ['Elixir.Fluid.Blocks','Elixir.Fluid.Break','Elixir.Kernel',
  'Elixir.Protocol','Elixir.Fluid.ForElse.Iterator','Elixir.Fluid.Tags',
  'Elixir.Fluid.Templates','Elixir.Module','Elixir.Kernel.Def',
  'Elixir.Fluid.Contexts','Elixir.Iterator','Elixir.Fluid.ForElse'],
 ['Elixir.Enum','Elixir.Fluid.Variables','Elixir.String.Chars',
  'Elixir.String','Elixir.Dict','Elixir.Fluid','Elixir.Regex',
  'Elixir.Fluid.Render','Elixir.Access',erlang],
 [],nil}.
